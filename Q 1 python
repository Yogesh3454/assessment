def search_matrix(matrix, target):
    if not matrix or not matrix[0]:
        return False

    rows, cols = len(matrix), len(matrix[0])
    row, col = 0, cols - 1

    while row < rows and col >= 0:
        current_value = matrix[row][col]
        
        if current_value == target:
            return True
        elif current_value > target:
            col -= 1
        else:
            row += 1

    return False

# Example usage:
matrix = [
    [1, 4, 7, 11],
    [2, 5, 8, 12],
    [3, 6, 9, 16],
    [10, 13, 14, 17]
]

target = 5
result = search_matrix(matrix, target)
print(f'Target {target} {"found" if result else "not found"} in the matrix.')

"""
This algorithm takes advantage of the sorted nature of the matrix and starts from the top-right corner. 
It compares the current element with the target value and moves either left or down based on the comparison, 
effectively eliminating half of the remaining search space in each step. 
The time complexity of this algorithm is O(m + n), 
where m is the number of rows and n is the number of columns.
"""






